4.9 LazyInitializationException

Мы знаем прокси объекты и как Hibernate использует их для отдельной коллекции или сущности, но какие проблемы они могут
принести?

Получили ошибку LazyInitializationException, потому что PersistenceSet содержит в себе сессию, с помощью которой мы
в последующем делаем запрос в БД и по ключу получаем коллекцию. Но тут мы закрыли сессию, мы ассоц-м наш Lazy объект
с сессией в тот момент, когда делаем запрос. Мы сделали запрос на получение компании, следовательно это же самая сессия,
с помощью которой был сделан этот запрос и проассоц-сь с PersistenceSet, значит мы не можем её закрыть до тех пор, пока
не получим наших пользователей, если, конечно, хотим их получить.

В реальных приложения сессию открывают и закрывают на уровне сервисов, до тех пор, пока мы делаем какую-то логику на
уровне сервиса, мы не закрываем сессию.
Следовательно, если какой-то контроллер вызывает сервис, то мы проверяем - есть ли текущая сессия, если есть, мы просто
её переиспользуем, если же её нет - нам придётся на уровне сервиса открыть её и делать соответствующие вызовы в DAO.


 @Test
    void testLazyInitializationException() {
        Company company = null;
        try (var sessionFactory = HibernateUtil.buildSessionFactory();
             var session = sessionFactory.openSession()) {
            session.beginTransaction();

            company = session.get(Company.class, 1);

            session.getTransaction().commit();
        }
        var users = company.getUsers();
        System.out.println(users.size());

    }

Есть, кстати, метод, чтобы сразу получить прокси объект ->  company = session.getReference(Company.class, 1);
Никаких запросов в БД в данном случае не будет.



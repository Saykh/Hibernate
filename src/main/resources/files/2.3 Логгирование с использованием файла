2.3 Логгирование с использованием файла


Ранее мы использовали appender для вывода в консоль. Но мощь логов в том, что мы можем выводить их куда угодною - в БД,
файл и отправлять по TCP.

Реализуем это с помощью новых appender.

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

<log4j:configuration>

    <!-- Куда отправлять сообщения -->
    <appender name="console" class="org.apache.log4j.ConsoleAppender">
        <param name="target" value="System.out"/>

        <layout class="org.apache.log4j.PatternLayout">
            <param name="conversionPattern" value="[%d{HH:mm:ss,SSS}] %p [%c: %L] %m%n"/>
        </layout>
    </appender>

    <!-- Добавили новый appender, который является объектом RollingFileAppender -->
    <appender name="file" class="org.apache.log4j.RollingFileAppender">
        <param name="file" value="hibernate-starter.log"/>

        <param name="append" value="true"/>
        <param name="maxFileSize" value="20MB"/>
        <param name="maxBackupIndex" value="10"/>

        <layout class="org.apache.log4j.PatternLayout">
            <param name="conversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss,SSS}] %p [%c: %L] %m%n"/>
        </layout>

        <filter class="org.apache.log4j.varia.LevelRangeFilter">
            <param name="LevelMin" value="ALL"/>
        </filter>
    </appender>

    <!-- Сам лог. Их может быть несколько -->
    <root>
        <level value="info"/>
        <appender-ref ref="console"/> <!-- Если их несколько, можно перечислить -->
        <appender-ref ref="file"/>
    </root>

</log4j:configuration>


Вспомни про:

  <param name="append" value="true"/>
  <param name="maxFileSize" value="20MB"/>
  <param name="maxBackupIndex" value="10"/>


Можем добавить ещё один лог:

    <!-- root логгер самый главный, но мы вот так можем создавать свои. Название логгера определяется
    пакету мы хотим отслеживать. Теперь все лог сообщения из этого пакета будут попадать в этот логгер.
    И тот и другой отправляют в консоль, поэтому будет дублирование. Пишем в ребенке additivity = false,
    чтобы не было дублирования логов, которые генерирует root, а он parent для других логов. -->
    <logger name="com.dmdev" additivity="false">
        <level value="info"/>
        <appender-ref ref="console"/>
    </logger>



    <!-- Сам лог. Их может быть несколько -->
    <root>
        <level value="info"/>
        <appender-ref ref="console"/> <!-- Если их несколько, можно перечислить -->
        <appender-ref ref="file"/>
    </root>


Чтобы не дублировать в каждом классе ->


public class HibernateRunner {

    private static final Logger log = LoggerFactory.getLogger(HibernateRunner.class);

}
, мы можем над классом использовать аннотацию @Slf4j, которая сгенерит нам такую строку для соответствующего класса.

@Slf4j
public class HibernateRunner {

}